@title Umka Statically Typed Embedded Scripting Language

@tangler flx_umka.hpp      = share/lib/rtl/flx_umka.hpp
@tangler umka.flx          = share/lib/std/umka.flx
@tangler unix_umka.fpc     = $PWD/src/config/unix/umka.fpc
@tangler win_umka.fpc      = $PWD/src/config/win/umka.fpc

@tangle flx_umka.hpp
#ifdef FLX_STATIC
#define UMKA_STATIC 1
#endif

#include "umka_api.h"
@

@tangle umka.flx
// Umka API will go here
class Umka {
  requires package "umka";

  type umka_t = "void*";

  cstruct UmkaStackSlot {
    intVal  : int64;
    uintVal : uint64;
    ptrVal  : int64;
    realVal : double;
  };

  cstruct UmkaError {
    fileName : +char;
    line     : int;
    pos      : int;
    msg      : +char;
  };

  typedef UmkaExternFunc = +UmkaStackSlot * &UmkaStackSlot --> 0;

  gen  umkaAlloc     : 1 -> umka_t;     // create interpreter
  proc umkaFree      : umka_t;          // free interpreter

  gen  umkaInit      : umka_t * +char * +char * int * int * int * +(+char) -> bool; 
    // filename, source string, storage size, stack size, argv argc
    // if source string is NULL, program is loaded from filename
    // otherwise filename just acts as documentation for error messages

  gen  umkaCompile   : umka_t -> bool; // Assemble to VM code

  gen  umkaRun       : umka_t -> bool; // Run assembled VM code

  gen  umkaCall      : umka_t * int * int * +UmkaStackSlot * &UmkaStackSlot -> bool; 
    // entry offset in VM code, 
    // number of parameters, 
    // actual parameter array, 
    // pointer to location for return value
 
  proc umkaGetError  : umka_t * &UmkaError; // client supplies address to put error object

  proc umkaAsm       : umka_t * +char;      // dump VM code to string

  proc umkaAddFunc   : umka_t * +char  * UmkaExternFunc;  
    // Import C extension with name

  gen  umkaGetFunc   : umka_t * +char * +char -> int; 
    // get offset of function with given module and file name
    // can be used by umkaCall to invoke function
} // class Umka
@

@tangle unix_umka.fpc
Name: Umka
Description: Umka Embedded interpreter
provides_dlib: -lflx_umka_dynamic
provides_slib: -lflx_umka_static
includes: '"flx_umka.hpp"'
library: flx_umka
macros: UMKA_BUILD
srcdir: src/umka-lang/src
headers: umka_api.h 
src: umka_.*\.c
build_includes: src/umka-lang/src 
@



