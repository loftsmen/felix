@title Python Bindings
Felix can generate Python 3.x modules. At the time of writing
this packages, the compiler cannot yet generate types. But the modules
should be enough to start, provided we can actually write CPython
compatible functions to put in the modules.

@tangler pycore.flx          = share/lib/python/pycore.flx
@tangler pycore_macosx.fpc   = $PWD/src/config/macosx/pycore.fpc
@tangler scancython.flx      = $PWD/src/tools/scancython.flx
@tangler pycheck.flx         = $PWD/src/tools/pycheck.flx

@h1 Python Core
We provide C bindings for some basic Python stuff. This stuff
is all as reentrant as possible even though Python is not.

At this stage, the API binds, but some functions are known
to be wrong because they incorrectly use a non-existent C
type.

@tangle pycore.flx
// generated originally from Cython/Includes/cpython directory

requires package "pycore";

const Py_None : PyObject = "Py_None";

// Core
include "python/ref";

// numbers
include "python/bool";
include "python/float";
include "python/int";
include "python/long";
include "python/complex";

// concrete data types
include "python/string";
include "python/bytes";
include "python/tuple";
include "python/list";
include "python/dict";
include "python/buffer";
include "python/oldbuffer";
include "python/unicode";
include "python/bytearray";

include "python/iterator";
include "python/slice";
const Py_Ellipsis: PyObject = "Py_Ellipsis";
include "python/set";

// abstract daya types
include "python/sequence";
include "python/mapping";
include "python/number";

// Weird stuff
include "python/object";
include "python/instance";
include "python/method";
include "python/function";
include "python/module";
include "python/type";

// program
include "python/version";
include "python/pystate";
include "python/pylifecycle";
include "python/exc";
include "python/pythread";
include "python/pystate";

// misc
include "python/descr";
include "python/memoryview";
fun PyMemoryView_GetContiguous:PyObject * int * char -> PyObject = 
  "PyMemoryView_GetContiguous($a)"
;
include "python/weakref";
include "python/pycapsule";
include "python/cobject";
fun PyCObject_FromVoidPtrAndDesc:
  address * address * (address * address --> 0) -> PyObject
;
include "python/ceval";
include "python/mem";

// Core Object Protocol
type PyObject = "PyObject*";
const header_version : uint = "PY_VERSION_HEX";

ctypes
  Py_ssize_t, PY_LONG_LONG, uPY_LONG_LONG, Py_complex, Py_buffer, _inittab,
  PyTypeObject,wrapperbase,PyInterpreterState,PyThreadState,
  PyGILState_STATE,
  wchar_t, // Felix refuses to defined wchar because its crap ..
  PyOS_sighandler_t,
  PyCapsule_Destructor,
  Py_tss_t, PyThread_type_lock,
  PyGenObject,
  Py_UCS4 // probably should be uint32 or int32 ..
;

@
@h1 API builder
Script used originally to build API from sibling cython repository.

@tangle scancython.flx
var comment_line = RE2 " *#.*";
var varargs_fundef_line = RE2 r" *(.*) (\w+)\((.*\.\.\.)\)(.*)";
var fundef_line = RE2 r" *(.* \*?)(\w+)\((.*)\)(.*)";

var argt1 = RE2 r"(\w+)"; // one word
var argt2 = RE2 r"(\w+) +\w+"; // two words

// special cases
var argt2a = RE2 r"(unsigned long) \w+"; // two words

// C array like things rep as pointers
var argt3 = RE2 r"(char \*)(\w+)?"; // C string
var argt4 = RE2 r"(const char \*)(\w+)?"; // input C string
var argt4a = RE2 r"(const wchar_t \*)(\w+)?"; // input C string

var argt5 = RE2 r"(Py_UCS4 \*)(\w+)?"; // unicode string
var argt6 = RE2 r"(const Py_UCS4 \*)(\w+)?"; // unicode string

// Python object 
var argt7 = RE2 r"(PyObject ?\* ?)(\w+)?";
var argt7a = RE2 r"(PyObject ?\* *\*)(\w+)?";

// general cases
var argt8 = RE2 r"(\w+) *\* ?(\w+)?";
var argt8a = RE2 r"(\w+) *\*\* ?(\w+)?";
var argt9 = RE2 r"void \(\*destr\)\(void \*\)";
var argt10 = RE2 r"void \(\*func\)\(\)";

fun strip_param (s:string) { 
  // unfortunately chainmatch is a statement only
  chainmatch Re2::Match (argt1, s) with  
  | Some v => return v.1;
  ormatch Re2::Match (argt2, s) with
  | Some v => return v.1;
  ormatch Re2::Match (argt2a, s) with
  | Some v => return "ulong";
  ormatch Re2::Match (argt3, s) with
  | Some v => return "+char";
  ormatch Re2::Match (argt4, s) with
  | Some v => return "+char";
  ormatch Re2::Match (argt4a, s) with
  | Some v => return "+wchar_t";
  ormatch Re2::Match (argt5, s) with
  | Some v => return "+Py_UCS4";
  ormatch Re2::Match (argt6, s) with
  | Some v => return "+Py_UCS4";
  ormatch Re2::Match (argt7, s) with
  | Some v => return "/* weak */ PyObject";
  ormatch Re2::Match (argt7a, s) with
  | Some v => return "&PyObject";
  ormatch Re2::Match (argt8, s) with
  | Some v => return "&"+v.1;
  ormatch Re2::Match (argt8a, s) with
  | Some v => return "&(&" +v.1+")";
  ormatch Re2::Match (argt9, s) with
  | Some v => return "(address-->0)";
  ormatch Re2::Match (argt10, s) with
  | Some v => return "(1-->0)";
  | _ => 
    if s == "" do 
      return "1"; 
    else 
      return "/* %%%%% cant parse: '" + s + "' */";
    done
  endmatch;
}

fun fixtype (s:string) => 
  let x = strip s in
  match x with
  | "cdef PyTypeObject *" => "&PyTypeObject"
  | "PyInterpreterState *" => "&PyInterpreterState"
  | "PyThreadState *" => "&PyThreadState"
  | "Py_buffer *" => "&Py_buffer"

  | "ob" => "PyObject"
  | "PyObject*" => "PyObject"
  | "PyObject *" => "PyObject"
  | "PyObject**" => "&PyObject"
  | "object" => "PyObject"
  | "bytearray" => "PyObject"

  | "bint" => "bool"

  | "list" => "PyObject"
  | "dict" => "PyObject"
  | "tuple" => "PyObject"
  | "slice" => "PyObject"
  | "bytes" => "PyObject"
  | "type" => "PyObject"
  | "descr" => "PyObject"
  | "unicode" => "PyObject"

  | "size_t" => "size"
  | "unsigned long" => "ulong"
  | "char*" => "+char"
  | "wchar_t *" => "+wchar_t"
  | "const char *" => "+char"
  | "void *" => "address"
  | "void*" => "address"
  | "&void" => "address"
  | "&Py_UNICODE" => "+char" // UTF8 encoding
  | "Py_UNICODE*" => "+char" // UTF8 encoding
  | "Py_UCS4*" => "+Py_UCS4" // UCS4 encoding 
  | "Py_UCS4" => "Py_UCS4"   // UCS4 encoding
  | "PY_INT64_T" => "int64"
  | "Py_tss_t *" => "&Py_tss_t"
  | _ => s
;

var exclude = ([
  "PyString_FromFormatV",
  "PyBytes_FromFormatV",
  "PyDescr_NewWrapper", // return type in descr.pxd not specified
  "PyCObject_FromVoidPtrAndDesc",
  "PyThread_start_new_thread"
]);


fun translate (iname,data) {
  println$ "Processing " + iname;

  // split raw data into lines
  var lines = split (data, "\n");

  // strip out comments and blank lines
  var stripped = Empty[string]; 
  for line in lines do
    if strip line != "" 
      match Re2::Match (comment_line, line) with
      | None =>  stripped += line;
      | _ => ;
      endmatch;
  done

  var processed = Empty[string];
  for line in stripped do
    chainmatch Re2::Match (varargs_fundef_line, line) with
    | Some _ => processed += "// Varargs fundef: " + line; 
    ormatch Re2::Match (fundef_line, line) with
    | None => processed += "// Nonfunction line: " + line;
    | Some v => 
      processed += "// FUNCTION: " + line;
      var ret = strip v.1;
      var name = v.2;
      var argstring = v.3;
      var exc = v.4;
      var args = unbox$ List::map (strip of string) (split (argstring, ","));
      //println$ "  ret    = " + ret;
      //println$ "  name   = " + name;
      //println$ "  args   = " + args.str;
      //for arg in args do
      //  println$ "             " + strip_param arg;
      //done
      //println$ "  exc    = " + exc;
      if name in exclude do
        ;
      else
        var argts = unbox$ List::map strip_param args;
        var fargs = 
          match argts with 
          | Empty => "1" 
          | _ => strcat " * " (List::map (fun (x:string) => fixtype x) argts) 
          endmatch
        ;
        var cargs = match argts with | Empty => "()" | _ => "($a)";
        var binder = match ret with | "void" => "proc" | _ => "gen";
        var terminator = match ret with | "void" => ";" | _ => "";
        var fret = match ret with | "void" => "" | _ => " -> " + fixtype ret;
        var cast = match ret with | "const char *" => "(char*)" | _ => "";
        var cdef = if cast == "" then "" else " = " + "'" + cast+name + cargs + terminator "'";  
        var outline = "  " binder + " " + name + ": " +  fargs + fret + cdef + ";"
        ;
        println$ outline;
        processed += outline + "\n";
      done
    endmatch;
  done
  return strcat "\n" processed;
}

var exclude_file = 
  '__init__.pxd',
  'array.pxd',     // external module..
  'datetime.pxd',  // external module ..
  'getargs.pxd',   // wa_args stuff, no use
  'longintrepr.pxd', // internal repr details, omit
  'pyport.pxd'  // RUBBISH DO NOT USE
;

proc mainline () {
  println$ "Cython library scanner";

  // design to run in Felix repository, with cython installed as a sibling directory
  var dirname = "../cython/Cython/Includes/cpython";
  var regex = RE2 ".*\\.pxd";
  var files = FileSystem::regfilesin(dirname, regex);
  println$ files;
  FileSystem::unlink "cpython_api";
  for base in files do 
    if base not in exclude_file do
      var iname = Filename::join (dirname, base);
      var bbase = Filename::strip_extension base;
      var oname = "src/packages/py_" +bbase+".fdoc";
      var inp = load iname;
      var out = "";
      out += "@title Python C API " + bbase + "\n";
      out += "@tangler "+bbase ".flx = share/lib/python/"+bbase+".flx\n";
      out += "@h1 " + bbase + "\n";
      out += "@tangle " + bbase + ".flx\n";
      out += translate (base,inp);
      out += "@\n";
      save (oname, out);
    done
  done
}

mainline;
@
 
@tangle pycheck.flx


include "python/pycore";

fun ptest(q:PyObject,w:PyObject):PyObject {
  println$ Py_GetVersion();
  Py_Initialize();

  var x : PyObject = PyLong_FromLong (42);
  var y : long = PyLong_AsLong (x);
  println$ PyLong_Check x;
  println$ y;
  println$ (f"%x" header_version);
  return x;
}

C_hack::ignore (ptest(Py_None,Py_None));

export python fun ptest of (PyObject * PyObject) as "ptest";
@


@tangle pycore_macosx.fpc
Name: Pycore
Description: Macosx bindings to Python shared run time library core.
cflags: -I/Library/Frameworks/Python.framework/Versions/3.8/Headers
includes: '"Python.h"'
provides_dlib: /Library/Frameworks/Python.framework/Versions/3.8/Python
// My install of the official python doesn't include a static archive. Morons!
// The brew install does. Oh well...
//provides_slib: /Library/Frameworks/Python.framework/Versions/3.8/lib/ -lpython3.8
@
