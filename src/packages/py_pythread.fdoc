@title Python C API pythread
@tangler pythread.flx = share/lib/python/pythread.flx
@h1 pythread
@tangle pythread.flx
// Nonfunction line: cdef extern from "pythread.h":
// Nonfunction line:     ctypedef void *PyThread_type_lock
// Nonfunction line:     ctypedef void *PyThread_type_sema
// FUNCTION:     void PyThread_init_thread()
  proc PyThread_init_thread: 1;

// FUNCTION:     long PyThread_start_new_thread(void (*)(void *), void *)  # FIXME: legacy
// FUNCTION:     void PyThread_exit_thread()
  proc PyThread_exit_thread: 1;

// FUNCTION:     long PyThread_get_thread_ident()  # FIXME: legacy
  gen PyThread_get_thread_ident: 1 -> long;

// FUNCTION:     PyThread_type_lock PyThread_allocate_lock()
  gen PyThread_allocate_lock: 1 -> PyThread_type_lock;

// FUNCTION:     void PyThread_free_lock(PyThread_type_lock)
  proc PyThread_free_lock: PyThread_type_lock;

// FUNCTION:     int PyThread_acquire_lock(PyThread_type_lock, int mode) nogil
  gen PyThread_acquire_lock: PyThread_type_lock * int -> int;

// FUNCTION:     void PyThread_release_lock(PyThread_type_lock) nogil
  proc PyThread_release_lock: PyThread_type_lock;

// Nonfunction line:     enum:
// Nonfunction line:         WAIT_LOCK    #   1
// Nonfunction line:         NOWAIT_LOCK  #   0
// Nonfunction line:     ctypedef enum PyLockStatus:
// Nonfunction line:         PY_LOCK_FAILURE = 0
// Nonfunction line:         PY_LOCK_ACQUIRED = 1
// Nonfunction line:         PY_LOCK_INTR
// FUNCTION:     size_t PyThread_get_stacksize()
  gen PyThread_get_stacksize: 1 -> size;

// FUNCTION:     int PyThread_set_stacksize(size_t)
  gen PyThread_set_stacksize: size -> int;

// FUNCTION:     int PyThread_create_key()
  gen PyThread_create_key: 1 -> int;

// FUNCTION:     void PyThread_delete_key(int)
  proc PyThread_delete_key: int;

// FUNCTION:     int PyThread_set_key_value(int, void *)
  gen PyThread_set_key_value: int * address -> int;

// FUNCTION:     void * PyThread_get_key_value(int)
  gen PyThread_get_key_value: int -> address;

// FUNCTION:     void PyThread_delete_key_value(int key)
  proc PyThread_delete_key_value: int;

// FUNCTION:     void PyThread_ReInitTLS()
  proc PyThread_ReInitTLS: 1;

// Nonfunction line:     Py_tss_t Py_tss_NEEDS_INIT        # Not normally useful: Cython auto-initialises declared "Py_tss_t" variables.
// FUNCTION:     Py_tss_t * PyThread_tss_alloc()
  gen PyThread_tss_alloc: 1 -> &Py_tss_t;

// FUNCTION:     void PyThread_tss_free(Py_tss_t *key)
  proc PyThread_tss_free: &Py_tss_t;

// FUNCTION:     int PyThread_tss_is_created(Py_tss_t *key)
  gen PyThread_tss_is_created: &Py_tss_t -> int;

// FUNCTION:     int PyThread_tss_create(Py_tss_t *key)
  gen PyThread_tss_create: &Py_tss_t -> int;

// FUNCTION:     void PyThread_tss_delete(Py_tss_t *key)
  proc PyThread_tss_delete: &Py_tss_t;

// FUNCTION:     int PyThread_tss_set(Py_tss_t *key, void *value)
  gen PyThread_tss_set: &Py_tss_t * address -> int;

// FUNCTION:     void * PyThread_tss_get(Py_tss_t *key)
  gen PyThread_tss_get: &Py_tss_t -> address;
@
