@title Spinlocks
@tangler flx_spinlock.hpp    = share/lib/rtl/flx_spinlock.hpp
@tangler flx_spinlock.cpp    = share/src/rtl/flx_spinlock.cpp
@tangler flx_spinlock.flx    = share/lib/std/control/spinlock.flx
@tangler flx_spinlock.fpc    = $PWD/src/config/flx_spinlock.fpc
@tangler cwbuf.flx           = share/lib/std/datatype/cwbuf.flx
@tangler poolalloc.flx       = share/lib/std/memory/poolalloc.flx

@h1 Spinlock
@tangle flx_spinlock.hpp
#ifndef _FLX_SPINLOCK_HPP
#define _FLX_SPINLOCK_HPP
#include "flx_rtl_config.hpp"
#include "flx_rtl.hpp"

#include <atomic>

namespace flx { namespace rtl {

RTL_EXTERN extern ::flx::gc::generic::gc_shape_t flx_spinlock_ptr_map;

// C++ compliant Lockable
struct RTL_EXTERN flx_spinlock {
private:
  flx_spinlock(flx_spinlock const&)=delete; // no copying
  flx_spinlock(flx_spinlock &&)=delete; // no moving
  flx_spinlock &operator=(flx_spinlock const &)=delete; // no assignment

  ::std::atomic_flag volatile flag;
public:
  flx_spinlock() noexcept; // init to clear
  void lock() volatile;
  void unlock() volatile;
};
 
struct RTL_EXTERN spinguard {
private:
  spinguard() = delete;
  spinguard(spinguard const&) = delete;
  spinguard *operator=(spinguard const&)=delete;
  bool cond;
  flx_spinlock *spinlock;
public:
  spinguard (flx_spinlock *);
  ~spinguard ();
};
}}

#endif
@



@tangle flx_spinlock.cpp
#include "flx_spinlock.hpp"

using namespace std;

namespace flx { namespace rtl {
flx_spinlock::flx_spinlock() noexcept { flag.clear(memory_order_release); }
void flx_spinlock::lock() volatile { while(flag.test_and_set(memory_order_acquire)); }
void flx_spinlock::unlock() volatile { flag.clear(memory_order_release); }


spinguard::spinguard (flx_spinlock *p) : spinlock(p) { spinlock->lock(); }
spinguard::~spinguard () {  spinlock->unlock(); }

::flx::gc::generic::gc_shape_t flx_spinlock_ptr_map = {
  "rtl::spinlock",
  1,sizeof(flx_spinlock),
  0, // no finaliser
  0, // fcops
  NULL, // no offsets
  0,0,0,
  gc::generic::gc_flags_default,
  0UL, 0UL
};
}} // namespace flx, rtl

@

@tangle flx_spinlock.flx
class Spinlock {
  requires package "flx_spinlock";
  _gc_pointer type spinlock = "::flx::rtl::flx_spinlock*";
  ctor spinlock : 1 = """
    [=] ()->::flx::rtl::flx_spinlock* { 
      auto p = new(*(ptf->gcp), ::flx::rtl::flx_spinlock_ptr_map,false) ::flx::rtl::flx_spinlock ();
      p->unlock();
      return p;
    } ()
  """;
  proc lock : spinlock = "$1->lock();";
  proc unlock : spinlock = "$1->unlock();";
} // Spinlock
@

@tangle cwbuf.flx
include "std/control/spinlock";

// RT circular buffer of machine words
// guarranteed nonblocking
// Semantics: 
//   when writing if the buffer is full, the read pointer is adjusted too
//   this means the read head will skip the oldest word
//
//   when reading if the buffer is empty, the write pointer is adjusted too
//   this means the next write will be just ahead of the read pointer
//   the read will return stale data 
class CWBuf 
{ 
  private struct _cwbuf_t {
     beg : +address; // first
     nd : +address;  // last + 1
     s : Spinlock::spinlock;   // the lock
     r : +address;   // read pointer
     w : +address;   // write pointer
     full : bool;    // buffer full?
     empty : bool;   // buffer empty?
  };
  typedef cwbuf_t = &_cwbuf_t;

  ctor cwbuf_t (n: size) { 
    var v = 
      let m = max (n,16uz) in 
      varray[address] (m, C_hack::cast[address] 0z)
    ;
    return 
      let p = v.stl_begin in 
      new (_cwbuf_t (p, v.stl_end,  Spinlock::spinlock (), p, p, false, true))
    ;
  }
 
  // the latest data will overwrite the most stale on full
  proc push ( b: cwbuf_t, d: address ) {
//println$ "Pool push " + d.str;
    b->s.Spinlock::lock;
    b->w <- d; // write
    pre_incr b.w; // incr
    if b->w == b->nd perform b.w <- b->beg; // wrap
    if b->full  perform b.r <- b->w;  // bump read pointer if it was full
    b.full <- b->w == b->r; // reset full flag
    b.empty <- false; // just written so can't be empty
    b->s.Spinlock::unlock;
  }
  proc pop (b : cwbuf_t, pp : &address) { 
    (b->s).Spinlock::lock;
    pp <- *(b->r);
    pre_incr b.r;
    if b->r == b->nd perform b.r <- b->beg;
    if b->empty perform b.w <- b->r;
    b.empty <- b->w == b->r;
    b.full <- false; // just read so can't be full
    (b->s).Spinlock::unlock;
//println$ "Pool pop " + pp->str;
  }

  // this version returns null on empty
  // to avoid reading a stale block
  proc pop_with_null_on_empty (b : cwbuf_t, pp : &address) { 
    (b->s).Spinlock::lock;
    if b->empty do 
      pp<- C_hack::cast[address] 0uz; 
    else 
      pp <- *(b->r);
      pre_incr b.r;
      if b->r == b->nd perform b.r <- b->beg;
      b.empty <- b->w == b->r;
      b.full <- false; // just read so can't be full
    done
    (b->s).Spinlock::unlock;
  }
}
@

@tangle poolalloc.flx
include "std/control/spinlock";
include "std/datatype/cwbuf";

class PoolAllocator {

  open CWBuf; 

  chip Pool_Allocator[T] (poolsize: size, alloc: 1 -> &T) 
    connector memory 
      pin acquire: %>&T
      pin release: %<&T
  {
    proc provider () {
      while true do
        var p : &T;
        pop (pool, C_hack::cast[&address] &p);
        write_pointer$ memory.acquire, p;
      done
    }
    proc collector () {
      while true do
        var p: &T;
        read_pointer$ memory.release, &p;
        push (pool,p.address);
      done
    }

    proc service () {
      spawn_fthread provider;
      //spawn_process collector;  // collector not running - why?
      spawn_fthread collector; 
    }

    var pool = cwbuf_t poolsize; 
    for i in 0uz ..< poolsize do
      var p = #alloc;
      println$ "Adding " + p.address.str + " to Allocator pool";
      push (pool,p.address);
    done 
    call service;
    println$ "Pool_Allocator terminated, NOT IMPLEMENTED YET FREE MEMORY!";
  }
} // Allocator

@

@tangle flx_spinlock.fpc
Name: flx_spinlock
Description: hard real time spinlock
Requires: flx
includes: '"flx_spinlock.hpp"'
@





