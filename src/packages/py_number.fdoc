@title Python C API number
@tangler number.flx = share/lib/python/number.flx
@h1 number
@tangle number.flx
// Nonfunction line: from .object cimport PyObject
// Nonfunction line: cdef extern from "Python.h":
// FUNCTION:     bint PyNumber_Check(object o)
  gen PyNumber_Check: PyObject -> bool;

// FUNCTION:     object PyNumber_Add(object o1, object o2)
  gen PyNumber_Add: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Subtract(object o1, object o2)
  gen PyNumber_Subtract: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Multiply(object o1, object o2)
  gen PyNumber_Multiply: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Divide(object o1, object o2)
  gen PyNumber_Divide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_FloorDivide(object o1, object o2)
  gen PyNumber_FloorDivide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_TrueDivide(object o1, object o2)
  gen PyNumber_TrueDivide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Remainder(object o1, object o2)
  gen PyNumber_Remainder: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Divmod(object o1, object o2)
  gen PyNumber_Divmod: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Power(object o1, object o2, object o3)
  gen PyNumber_Power: PyObject * PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Negative(object o)
  gen PyNumber_Negative: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Positive(object o)
  gen PyNumber_Positive: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Absolute(object o)
  gen PyNumber_Absolute: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Invert(object o)
  gen PyNumber_Invert: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Lshift(object o1, object o2)
  gen PyNumber_Lshift: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Rshift(object o1, object o2)
  gen PyNumber_Rshift: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_And(object o1, object o2)
  gen PyNumber_And: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Xor(object o1, object o2)
  gen PyNumber_Xor: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_Or(object o1, object o2)
  gen PyNumber_Or: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceAdd(object o1, object o2)
  gen PyNumber_InPlaceAdd: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceSubtract(object o1, object o2)
  gen PyNumber_InPlaceSubtract: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceMultiply(object o1, object o2)
  gen PyNumber_InPlaceMultiply: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceDivide(object o1, object o2)
  gen PyNumber_InPlaceDivide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceFloorDivide(object o1, object o2)
  gen PyNumber_InPlaceFloorDivide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceTrueDivide(object o1, object o2)
  gen PyNumber_InPlaceTrueDivide: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceRemainder(object o1, object o2)
  gen PyNumber_InPlaceRemainder: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlacePower(object o1, object o2, object o3)
  gen PyNumber_InPlacePower: PyObject * PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceLshift(object o1, object o2)
  gen PyNumber_InPlaceLshift: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceRshift(object o1, object o2)
  gen PyNumber_InPlaceRshift: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceAnd(object o1, object o2)
  gen PyNumber_InPlaceAnd: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceXor(object o1, object o2)
  gen PyNumber_InPlaceXor: PyObject * PyObject -> PyObject;

// FUNCTION:     object PyNumber_InPlaceOr(object o1, object o2)
  gen PyNumber_InPlaceOr: PyObject * PyObject -> PyObject;

// FUNCTION:     int PyNumber_Coerce(PyObject **p1, PyObject **p2) except -1
  gen PyNumber_Coerce: &PyObject * &PyObject -> int;

// FUNCTION:     object PyNumber_Int(object o)
  gen PyNumber_Int: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Long(object o)
  gen PyNumber_Long: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Float(object o)
  gen PyNumber_Float: PyObject -> PyObject;

// FUNCTION:     object PyNumber_Index(object o)
  gen PyNumber_Index: PyObject -> PyObject;

// FUNCTION:     Py_ssize_t PyNumber_AsSsize_t(object o, object exc) except? -1
  gen PyNumber_AsSsize_t: PyObject * PyObject -> Py_ssize_t;

// FUNCTION:     bint PyIndex_Check(object)
  gen PyIndex_Check: PyObject -> bool;
@
