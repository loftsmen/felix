
include "gui/__init__";
open FlxGui;

println$ "Basic Button Test";

// Initialise the SDL system (SDL + TTF + IMAGE)
FlxGui::init();

var font : font_t = 
  let font_name = dflt_sans_serif_font() in
  get_font(font_name, 12)
;

typedef butio_t = (butout: %>event_t, butresp: %<button_action_t);

// make an event handler for our window
chip ehandler 
  (w:window_t)
  (buts: varray[butio_t])
connector pins
  pin input: %<event_t
{
   // get a first event from the window manager
  var e: event_t = read pins.input;

  // while the event isn't a quit event ..
  while e.window.event.SDL_WindowEventID != SDL_WINDOWEVENT_CLOSE  do
    // print a diagnostic
    var s = 
      match e with
      | WINDOWEVENT we =>
        we.type.SDL_EventType.str + ": " + we.event.SDL_WindowEventID.str + " wid=" + we.windowID.str
      | MOUSEMOTION me =>
        me.type.SDL_EventType.str
      | _ => ""
    ;
    for but in buts do
      // subroutine call on channels
      var result = (but.butout, but.butresp) e;
      match result with
      | #NoAction => ;
      | ClickAction s => println$ "Button Clicked: " + s;
      endmatch;
    done

    // get another event
    e= read pins.input;
  done

  // we must have got a quit ..
  println$ "CLOSE EVENT";
} 

// Button colours
var skin = 
  let bsup = (label_colour=red, bg_colour=white,top_colour=blue,
    left_colour=blue, bottom_colour=red,right_colour=red)
  in

  let bsdown = (label_colour=red, bg_colour=blue,top_colour=darkgrey,
    left_colour=darkgrey, bottom_colour=lightgrey,right_colour=lightgrey)
  in

  let bsdis = (label_colour=red, bg_colour=black,top_colour=lightgrey,
    left_colour=lightgrey, bottom_colour=darkgrey,right_colour=darkgrey)
  in

  let bsmover = (label_colour=red, bg_colour=yellow,top_colour=blue,
    left_colour=blue, bottom_colour=red,right_colour=red)
  in
  (up=bsup, down=bsdown, mouseover=bsmover, disabled=bsdis)
;


proc mkbutton (
  w:window_t,                  // window to put button on
  x:int, y:int,                // where to put button in window
  label:string, font:font_t,   // button label and font 
  oresp: %>button_action_t,    // channel for button to send action on 
  ich: %<event_t               // channel for sending events to button
) 
{
  // button state object
  var bm = ButtonModel (label,Up);

  // button display object
  var bd = ButtonDisplay (bm) (w, font, label, label, skin,
    rect_t(x,y,100,20),point_t(x+5,y+15));

  // start the button controller
  device b = button_controller (bm,bd);
  circuit
    wire ich to b.ec
    wire oresp to b.response
  endcircuit
}

spawn_fthread {
  //create a window manager
  var wm = window_manager();

  // create a window
  var w1 = create_resizable_window("Felix:gui_06_button_01",100,100,400,400);
  w1.add$ mk_drawable FlxGui::clear lightgrey;
  w1.add$ mk_drawable FlxGui::write (100,100,font,black,"Basic Button Test");
  w1.update();
  w1.show();

  var iresp,oresp = #mk_ioschannel_pair[button_action_t];

  var ich1,b1 = #mk_ioschannel_pair[event_t];
  mkbutton(w1,100,250,"Button 1",font, oresp, ich1);

  var ich2,b2 = #mk_ioschannel_pair[event_t];
  mkbutton(w1,100,300,"Button 2",font, oresp, ich2);

  var buttons=varray((butout=b1, butresp=iresp), (butout=b2,butresp=iresp));

  // create a window controller for our window
  var event_handler = ehandler w1 buttons;
  var wc1 = window_controller (w1, event_handler);

  // attach controller to window manager
  var wno = wm.add_window wc1;

  // USE variable wno or Felix will elide the call!
  println$ "Window number " + wno.str;

  wm.run_with_timeout 15.0;
  runflag = false;
  println$ "gui_06 quitting";
};




