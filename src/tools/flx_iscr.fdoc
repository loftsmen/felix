
@h1 Core interscript interpreter.

@felix
fun streq : list[string] * list[string] -> bool =
  | #Empty, #Empty => true

  | (Cons (head1, tail1) as lst1), (Cons (head2, tail2) as lst2) =>
    if head1 == head2                           then streq (tail1, tail2)
    elif head1 == "" or prefix (head1,"#line")  then streq (tail1, lst2)
    elif head2 == "" or prefix (head2,"#line")  then streq (lst1, tail2)
    else false

  | (#Empty as lst1), (Cons (head2, tail2) as lst2) =>
    if head2 == "" or prefix (head2,"#line")  then streq (lst1, tail2)
    else false

  | (Cons (head1, tail1) as lst1), (#Empty as lst2) =>
    if head1 == "" or prefix (head1,"#line")  then streq (tail1, lst2)
    else false

;

struct tangler_buffer = 
{
  dirname  : string;
  filename : string;
  src      : string;
  lno      : int;
  emitlnos : bool;
  buffer : list[string];

  fun cal_hash_directive (newlno: int) => 
    let ext = Filename::get_extension self.filename in
    if ext == ".fpc" then
     'Generated_from: '+newlno.str + ' "' + self.src + '"'
    else 
     '#line '+newlno.str + ' "' + self.src + '"'
  ;

  proc output_line (newlno:int) (line:string) {
    if self->emitlnos and newlno > self->lno + 1 do
      val hash_directive = self->cal_hash_directive newlno;
      self.buffer <- Cons (hash_directive, self->buffer);
    done
    self.buffer <- Cons (rstrip line, self->buffer);
    self.lno <- newlno;
  }

  proc save (id:string)  
  {
    var dirname = self*.dirname;
    var filename = self*.filename;
//println$ "Save " + filename;
    // replace environment variable if the path starts with one.
    if filename.[0] == '$' do

      var endpos       = stl_find(filename,"/");
      var env_var_name = filename.[1 to endpos];
//println$ "DETECTED ENVIRONMENT VARIABLE " + env_var_name;
      var env_value    = (Env::getenv (env_var_name), "$" + env_var_name);
//println$ "     VALUE=" + env_value.0;

      if (env_value.0.len > 0uz) do
        filename = env_value.0 + filename.[endpos to];
      done

    done
          
    var pathname = 
      if filename.[0] == "/" then filename else Filename::join (dirname, filename)
    ;
//println$ "Finale pathname = " + pathname;

    var data = self*.buffer;
    var old = tail (rev_split (pathname.load, char "\n"));
    if not streq (old , data) do // note: will NOT create an empty file!
/*
println$ "=====================";
println$ "old<>new";
println$ "=====================";
println$ "OLD";
println$ "=====================";
println$ old;
println$ "=====================";
println$ "NEW";
println$ "=====================";
println$ data;
println$ "=====================";
println$ "";
println$ "";
*/
      Directory::mkdirs (Filename::dirname pathname);
      var f = fopen_output pathname;
      if not valid f do
        println$ "Can't open output file " + pathname;
        System::exit 1;
      done
      println$ "Write     " + id + "->" + pathname;
      for line in rev data do
        writeln$ f,line;
      done
      fclose f;
    else 
      //println$ "Unchanged " + id + "->" + pathname;
    done
  } // save
}; // file buffer

val file_to_add_linenos = 
     '.flx','.c','.h','.cpp','.cxx','.hpp',
     '.fsyn','.fpc','.py'
;

variant state_t = Doc | Tangling of &tangler_buffer; 
struct scan_state_t {
  state : state_t;
  tanglers : strdict[&tangler_buffer];
};

open Regdef; // required

// helper definitions
regdef optwhite = ' '*;
regdef white = ' '+;
regdef felt= perl ("[A-Za-z._][-A-Za-z0-9_.]*");
regdef eelt= "$" felt;
regdef delt = felt | eelt;
regdef fname = (delt "/")* delt;

// A tangler definition looks like:
// @tangler name = filename
regdef tangler_def_regdef = 
  "@tangler" white group (felt) optwhite "=" 
  optwhite group (fname) optwhite 
; 

// To set the output we just use
// @tangle name
regdef tangler_use_regdef = 
  "@tangle" white group (felt) optwhite 
; 
var tangler_def_re2 = RE2 (Regdef::render tangler_def_regdef);
var tangler_use_re2 = RE2 (Regdef::render tangler_use_regdef);

proc def_tangler (scan_state: &scan_state_t) (id:string, filename:string, odir:string, src:string, lno:int)
{
  match get scan_state->tanglers id with
  | Some _ =>
    println$ "Duplicate definition of tangler " + id;
    System::exit 1;
  | #None =>
    var emitlnos = filename.Filename::get_extension in file_to_add_linenos;
    var tangler = tangler_buffer (odir,filename, src,lno, emitlnos, Empty[string]);
    add scan_state->tanglers id (new tangler);
  endmatch;
}

proc set_doc(scan_state: &scan_state_t) =>  scan_state . state <- Doc;
proc set_tangler (scan_state: &scan_state_t) (s:string) 
{
   match get scan_state->tanglers s with
   | Some p => scan_state.state <- Tangling p;
   | #None =>
      println$ "Can't find tangler " + s;
      System::exit 1;
   endmatch;
}
proc process_file (scan_state: &scan_state_t) (f:ifile) (iname:string) (odir:string)
{
  var lno = 0;
  for line in split (f.load, "\n") do
    ++lno;
    if line.[0] == "@" do
      match Match (tangler_def_re2, line) with
      | Some v =>
         def_tangler scan_state (v.1, v.2, odir, iname,lno);
      | #None => 
        match Match (tangler_use_re2, line) with
        | Some v =>
         set_tangler scan_state v.1;
        | #None => 
          if line.[1] == "@" do
            match scan_state->state with
            | #Doc => ;
            | Tangling b => b.output_line lno line.(1..);
            endmatch;
          else
            scan_state.set_doc;
          done
        endmatch;
      endmatch;
    else 
      match scan_state->state with
      | #Doc => ;
      | Tangling b => b.output_line lno line;
      endmatch;
    done 
  done
}
noinline proc iscr (iname:string) (var odir:string)
{
  if not FileStat::fileexists iname do
    println$ "File " + iname + " doesn't exist";
    System::exit 1;
  done
  odir = 
    if odir == "" then Directory::getcwd () 
    else Directory::mk_absolute_filename odir
  ;
  var scan_state = scan_state_t (Doc, strdict[&tangler_buffer] ());
  begin 
    var f = iname.fopen_input;
    scan_state&.process_file f iname odir;
    f.fclose;
  end
  match id,pbuffer in scan_state.tanglers do 
    pbuffer.save id;
  done
} // iscr

var din = 1.System::argv;
var fin = 2.System::argv;
var dout = 3.System::argv;

// ONE ARGUMENT
if fin == "" do
  var curdir = Env::getenv "PWD";
  iscr din curdir; // output to current directory

// TWO ARGUMENTS
elif dout == "" do // only two arguments: one input file and output directory
  iscr din fin;

// THREE ARGUMENTS
else
  if prefix (fin,"--regex=") do
    var rspec = fin.(8 ..);
println$ "Rspec = '" + rspec+"'";
    var files = FileSystem::regfilesin (din, rspec);
    for file in files do 
      var path = Filename::join (din,file);
      println$ "  File " + path; // iscr file dout; 
      iscr path dout;
    done
  else
    println$ "If three arguments are given the second must be '-regex=<regex>'.";
  done
done
